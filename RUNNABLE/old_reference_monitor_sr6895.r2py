"""
This security layer inadequately handles the undo functionality

Note:
    This security layer uses encasementlib.r2py, restrictions.default, repy.py and Python
    Also you need to give it an application to run.
    python repy.py restrictions.default encasementlib.r2py [security_layer].r2py [attack_program].r2py 
    
"""
TYPE = "type"
ARGS = "args"
RETURN = "return"
EXCP = "exceptions"
TARGET = "target"
FUNC = "func"
OBJC = "objc"


class LPFile():
    def __init__(self, filename, create):
        # globals
        mycontext['debug'] = False
        self.LPfile = openfile(filename, create)
        self.filename = filename
        self.pending_data = None
        self.pending_offset = None
        self.length = len(self.LPfile.readat(None,0))

        self.undofile = openfile(filename+".un", True)
        prev_write = self.undofile.readat(None,0)
        if prev_write:
            [self.pending_offset,self.pending_data] = prev_write.split(" ",1)
            self.pending_offset = int(self.pending_offset)
            #len_data = len(self.pending_data)+self.pending_offset
            #if  len_data > self.length:
            #    self.length = len_data


    def check_offset(self, offset):
        len_data = self.length
        if self.pending_data is not None and self.pending_offset is not None:
            len_data = len(self.pending_data)+self.pending_offset
            if  len_data < self.length:
                len_data = self.length
        if offset < 0:
            raise RepyArgumentError
        elif offset > len_data:
            raise SeekPastEndOfFileError

    def readat(self, bytes, offset):
        # Read from the file using the sandbox's readat...
        self.check_offset(offset)
        #if bytes > self.length - offset:
        #    raise RepyArgumentError
        data = self.LPfile.readat(None, 0)
        len_data = self.length
        if self.pending_data is not None and self.pending_offset is not None:
            len_data = len(self.pending_data)+self.pending_offset
            if  len_data < self.length:
                len_data = self.length

            data = data[:self.pending_offset] + self.pending_data + data[
                    len(self.pending_data)+self.pending_offset:]

        if bytes is None or bytes > len_data:
            return data[offset:offset+len_data]
        else:
            return data[offset:offset+bytes]

    def writeat(self, data, offset):
        self.check_offset(offset)
        if self.pending_data is not None and self.pending_offset is not None:
            len_data = len(self.pending_data)+self.pending_offset
            if  len_data > self.length:
                self.length = len_data
            self.LPfile.writeat(self.pending_data, self.pending_offset)


        self.undofile.close() #file has to be closed to remove it
        if self.filename+".un" in listfiles():
          removefile(self.filename+".un")

        self.undofile = openfile(self.filename+".un", True)
        self.undofile.writeat(str(offset)+" "+data, 0)

        self.pending_data = data
        self.pending_offset = offset

    def undo(self):
        self.pending_data = None
        self.pending_offset = None

    def close(self):
        if self.pending_data is not None and self.pending_offset is not None:
            self.LPfile.writeat(self.pending_data, self.pending_offset)
        self.LPfile.close()
        self.undofile.close() #file has to be closed to remove it
        if self.filename+".un" in listfiles():
          removefile(self.filename+".un")

def LPopenfile(filename, create):
    return LPFile(filename, create)

# The code here sets up type checking and variable hiding for you.
# You should not need to change anything below here.
sec_file_def = {
    "obj-type": LPFile,
    "name": "LPFile",
    "writeat": {"type": "func", "args": (str, (int, long)), "exceptions": Exception, "return": (int, type(None)), "target": LPFile.writeat},
    "readat": {"type": "func", "args": ((int, long, type(None)), (int, long)), "exceptions": Exception, "return": str, "target": LPFile.readat},
    "undo": {"type": "func", "args": None, "exceptions": None, "return": type(None), "target": LPFile.undo},
    "close": {"type": "func", "args": None, "exceptions": Exception, "return": (bool, type(None)), "target": LPFile.close}
}

CHILD_CONTEXT_DEF["openfile"] = {
    TYPE: OBJC,
    ARGS: (str, bool),
    EXCP: Exception,
    RETURN: sec_file_def,
    TARGET: LPopenfile
}

# Execute the user code
secure_dispatch_module()
